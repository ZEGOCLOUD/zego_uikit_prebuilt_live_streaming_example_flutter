import 'dart:convert';

import 'package:dio/dio.dart';

import 'service/impl/zegocloud_token.dart';

class YourGameServer {
  final miniGameHostUrl = ;
  final apiToken = 'api/token';
  final apiGetUserCurrency = 'api/getUserCurrency';
  final apiExchangeUserCurrency = 'api/exchangeUserCurrency';
  final dio = Dio(BaseOptions(validateStatus: (status) => true));

  Future<String> getToken(
      {required int appID,
      required String userID,
      String? serverSecret}) async {
    if (serverSecret?.isNotEmpty ?? false) {
      // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
      // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
      return ZegoTokenUtils.generateToken(appID, serverSecret!, userID);
    }
    final response = await dio.post('$miniGameHostUrl/$apiToken',
        data: {'app_id': appID, 'user_id': userID});
    return response.data.toString();
  }

  Future<dynamic> getUserCurrency(
      {required int appID,
      required String userID,
      required String gameID}) async {
    Response response;
    final dio = Dio();
    response = await dio.post('$miniGameHostUrl/$apiGetUserCurrency', data: {
      'UserId': userID,
      'AppId': appID,
      'MiniGameId': gameID,
    });

    return json.decode(response.data.toString());
  }

  Future<dynamic> exchangeUserCurrency(
      {required String outOrderId,
      required int appID,
      required String userID,
      required String gameID,
      required int exchangeValue}) async {
    final response =
        await dio.post('$miniGameHostUrl/$apiExchangeUserCurrency', data: {
      'OutOrderId': DateTime.now().millisecondsSinceEpoch.toString(),
      'UserId': userID,
      'MiniGameId': gameID,
      'AppId': appID,
      'CurrencyDiff': exchangeValue,
    });

    return json.decode(response.data.toString());
  }

  factory YourGameServer() => instance;
  static final YourGameServer instance = YourGameServer._internal();
  YourGameServer._internal();
}
